<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:ocntext="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <ocntext:component-scan base-package="com.atguigu.www"/>


    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
        配置默认的servlet处理静态资源
        当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/
        tomcat的web.xml配置的DefaultServlet的url-pattern也是/
        此时，浏览器发送的请求会优先被DispatcherServlet进行处理，但是DispatcherServlet无法处理静态资源
        若配置了<mvc:default-servlet-handler />，此时浏览器发送的所有请求都会被DefaultServlet处理
        若配置了<mvc:default-servlet-handler />和<mvc:annotation-driven />
        浏览器发送的请求会先被DispatcherServlet处理，无法处理在交给DefaultServlet处理
    -->
    <mvc:default-servlet-handler />

    <!--开启mvc的注解驱动-->
    <mvc:annotation-driven />

    <!--
        视图控制器：为当前的请求直接设置视图名称实现页面跳转
        path：设置处理的请求地址
        view-name：设置请求地址所对应的视图名称

        若设置视图控制器，则只有视图控制器所设置的请求会被处理，其他的请求将全部404
        此时必须在配置一个标签：<mvc:annotation-driven />
    -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--必须通过文件解析器的解析才能将浏览器上传的文件转换为MultipartFile对象,且id必须为multipartResolver，因为是根据id来获取bean的-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />


    <!-- 拦截器interceptor的配置-->
    <!--<mvc:interceptors>
    <ref bean="firstInterceptor" />
    <ref bean="secondInterceptor" />
     bean和ref标签所配置的拦截器默认对DispatcherServlet处理的所有的请求进行拦截 ;
     <bean class="com.atguigu.interceptor.FirstInterceptor"/> ;
     <ref bean="firstInterceptor" /> ;
     <mvc:interceptor>
         配置需要拦截的请求的请求路径，/**表示所有请求 ;
        <mvc:mapping path="/**"/>
         配置需要排除拦截的请求的请求路径 ;
        <mvc:exclude-mapping path="/abc"/>
         配置拦截器 ;
        <ref bean="firstInterceptor" />
    </mvc:interceptor> ;
</mvc:interceptors>-->

    <!--<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                 key设置要处理的异常，value设置出现该异常时要跳转的页面所对应的逻辑视图 ;
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
         设置共享在请求域中的异常信息的属性名 ;
        <property name="exceptionAttribute" value="ex"></property>
    </bean>-->
</beans>